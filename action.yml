name: 'create-release-branch'
description: 'Creates a release branch, updates version, and generates changelog based on PR data'
author: 'Sulhadin Ã–ney'
branding:
  icon: 'git-branch'
  color: red

inputs:
  source-branch:
    description: 'Source branch to cherry-pick commits from'
    required: true
    default: 'dev'
  target-branch:
    description: 'Target branch to create the release from'
    required: true
    default: 'main'
  branch-prefix:
    description: 'Prefix for the release branch name'
    required: false
    default: 'Release/'
  merged-since:
    description: 'Include PRs merged since date (format: YYYY-MM-DDTHH:MM:SSZ)'
    required: false
  merged-until:
    description: 'Include PRs merged until date (format: YYYY-MM-DDTHH:MM:SSZ)'
    required: false
  include-pr-ids:
    description: 'Comma-separated list of PR IDs to include'
    required: false
  exclude-pattern:
    description: 'PR title pattern to exclude PRs/commits'
    required: false
  github-token:
    description: 'GitHub token for authentication'
    required: true
  version-file:
    description: 'File name holding the version (should contain .version)'
    required: false
    default: 'package.json'
  enforce-version:
    description: 'Enforcing a specific version (not cool but anyway)'
    required: false
  commit-changes:
    description: 'CleanUp&Commit created files'
    required: false
    default: 'true'
  working-dir:
    description: 'Working directory for monorepos'
    required: false
  repo-path:
    description: 'Repository path'
    required: true
  verbose:
    description: 'Enable verbose logging'
    required: false
    default: 'false'

outputs:
  version:
    description: 'The new version created by the action'
    value: ${{ steps.update-version.outputs.version }}
  release-branch:
    description: 'The name of the created release branch'
    value: ${{ steps.update-version.outputs.release-branch }}
  release-notes:
    description: 'Release notes for the created release'
    value: ${{ steps.update-version.outputs.release-notes }}
  pr-url:
    description: 'URL of the created pull request'
    value: ${{ steps.update-version.outputs.pr-url }}
  changelog:
    description: 'Formatted markdown release notes for the created release'
    value: ${{ steps.update-version.outputs.changelog }}


runs:
  using: composite
  steps:
    - name: Setup Git
      run: |
        # Capture the current branch to restore later
        PREV_BRANCH=$(git branch --show-current)
        echo "PREV_BRANCH=$PREV_BRANCH" >> "$GITHUB_ENV"

        # Configure git for this action
        git config --global user.name "${{ github.actor }}"
        git config --global user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
        
        # Set GitHub token for API access
        export GH_TOKEN="${{ inputs.github-token }}"
      shell: bash

    - name: Generate Release Branch
      run: |
        ENFORCE_VERSION="${{ inputs.enforce-version }}"
        if [ -n "$ENFORCE_VERSION" ]; then
          # strict X.Y.Z
          if ! node -p "'$ENFORCE_VERSION'.match(/^\d+\.\d+\.\d+$/)?true:false" | grep -q "true"; then
            echo "::error::Invalid semantic version format for enforce-version: $ENFORCE_VERSION"
            exit 1
          fi
            echo "Using enforced version: $ENFORCE_VERSION"
        else
            echo "No enforce-version provided; skipping enforced version validation."
        fi
        
        echo "Repository: ${{ github.repository }}"
        echo "Repository Name: ${{ github.event.repository.name }}"

        echo "Parameters: --source ${{ inputs.source-branch }} --target ${{ inputs.target-branch }}"
        
        WORKING_DIR="${{ inputs.working-dir }}"
        if [ -z "$WORKING_DIR" ]; then
          WORKING_DIR="."
        fi
        
        VERSION_FILE="$WORKING_DIR/${{ inputs.version-file }}"
        
        # Build command with only non-empty parameters
        CMD="${{ github.action_path }}/scripts/create-release-branch.sh --source ${{ inputs.source-branch }} --target ${{ inputs.target-branch }}"
        
        # Add optional parameters only if they have values
        if [ ! -z "${{ inputs.merged-since }}" ]; then
          echo "Param: merged-since = ${{ inputs.merged-since }}"
          CMD="$CMD --from-date ${{ inputs.merged-since }}"
        fi
        
        if [ ! -z "${{ inputs.merged-until }}" ]; then
          echo "Param: merged-until = ${{ inputs.merged-until }}"
          CMD="$CMD --to-date ${{ inputs.merged-until }}"
        fi
        
        if [ ! -z "${{ inputs.include-pr-ids }}" ]; then
          echo "Param: include-pr-ids = ${{ inputs.include-pr-ids }}"
          CMD="$CMD --include-pr-ids ${{ inputs.include-pr-ids }}"
        fi
        
        if [ ! -z "${{ inputs.exclude-pattern }}" ]; then
          echo "Param: exclude-pattern = ${{ inputs.exclude-pattern }}"
          CMD="$CMD --exclude ${{ inputs.exclude-pattern }}"
        fi   
        
        if [ ! -z "${{ inputs.branch-prefix }}" ]; then
          echo "Param: release_branch_prefix = ${{ inputs.branch-prefix }}"
          CMD="$CMD --branch-prefix ${{ inputs.branch-prefix }}"
        fi      
        
        if [ ! -z "${{ inputs.enforce-version }}" ]; then
          echo "Param: release_branch_prefix = ${{ inputs.enforce-version }}"
          CMD="$CMD --enforce-version ${{ inputs.enforce-version }}"
        fi
        
        if [ "${{ inputs.verbose }}" = "true" ]; then
          echo "Param: verbose = true"
          CMD="$CMD --verbose"
        fi
        
        # Add version file
        CMD="$CMD --version-file $VERSION_FILE"
        
        # Execute the command
        echo "Executing: $CMD"
        
        # Run script with error handling
        if ! bash $CMD; then
          echo "::error::Failed to create release branch"
          exit 1
        fi
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}

    - name: Update Version and Generate Changelog
      id: update-version
      run: |
        WORKING_DIR="${{ inputs.working-dir }}"
        if [ -z "$WORKING_DIR" ]; then
          WORKING_DIR="."
        fi
        
        VERSION_FILE="$WORKING_DIR/${{ inputs.version-file }}"
        CHANGELOG_FILE="$WORKING_DIR/CHANGELOG.md"
    
        # Update version
        bash "${{ github.action_path }}/scripts/update-version.sh" "$(cat version.txt)" "$VERSION_FILE"
        
        
        # Get the new version
        version=$(jq -r '.version' "$VERSION_FILE")
        
        REPO_PATH="${{ inputs.repo-path }}"
        
        # Generate changelog
        bash "${{ github.action_path }}/scripts/generate-changelog.sh" "$version" "$(cat pr_data.txt)" "$CHANGELOG_FILE" "$REPO_PATH"
        
        
        # Output logs for debugging
        echo "::group::Release Notes"
        cat release_notes.txt
        echo "::endgroup::"
        
        echo "::group::PR Data"
        cat pr_data.txt
        echo "::endgroup::"
        
        echo "::group::Changelog"
        cat "$WORKING_DIR/CHANGELOG.md"
        echo "::endgroup::"
        
        # Get current branch
        CURRENT_BRANCH=$(git branch --show-current)
        echo "Current branch after script: $CURRENT_BRANCH"
                
        # SET OUTPUT VARIABLES
        echo "release-notes<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT    
        
        echo "pr-url<<EOF" >> $GITHUB_OUTPUT
        cat pr_url.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT 
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat changelog.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        echo "version=$version" >> $GITHUB_OUTPUT
        echo "release-branch=$CURRENT_BRANCH" >> $GITHUB_OUTPUT
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}

    - name: Commit and Push Changes
      if: inputs.commit-changes == 'true'
      run: |
        # Set working directory variable
        WORKING_DIR="${{ inputs.working-dir }}"
        if [ -z "$WORKING_DIR" ]; then
          WORKING_DIR="."
        fi
        
        version=$(jq -r '.version' "$WORKING_DIR/${{ inputs.version-file }}")
        CURRENT_BRANCH=$(git branch --show-current)
        
        # Clean up temporary files
        rm -f version.txt release_notes.txt pr_data.txt pr_url.txt changelog.txt
        
        
        # Commit and push changes
        git add .
        git commit -m "bump(version): app to ${version}"
        git pull --rebase origin $CURRENT_BRANCH
        git push origin HEAD:$CURRENT_BRANCH

        # Switch back to the branch we started from, if available
        if [ -n "${PREV_BRANCH}" ]; then
          git checkout "${PREV_BRANCH}" 2>/dev/null || git switch "${PREV_BRANCH}" || true
        fi
        
        echo "::notice::New version: $version pushed to $CURRENT_BRANCH"
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}