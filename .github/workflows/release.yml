name: Create Release and Publish to Marketplace
on:
  push:
    branches:
      - main

jobs:
  check-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if push is from a release
        id: check_release
        run: |
          # Get the most recent commit
          COMMIT_TITLE=$(git log -1 --pretty=format:"%s")
          echo "Last commit title: $COMMIT_TITLE"
          
          # Check if the commit title starts with Release/ or contains Release/
          if [[ "$COMMIT_TITLE" == Release/* || "$COMMIT_TITLE" == *"Release/"* ]]; then
            echo "is_release=true" >> $GITHUB_OUTPUT
            echo "This is a release commit"
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "This is not a release commit"
          fi

      - name: Get version
        id: get_version
        if: steps.check_release.outputs.is_release == 'true'
        run: |
          # Extract version from version.json file
          VERSION=$(jq -r '.version' version.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
          # Extract release notes from CHANGELOG.md
          CHANGELOG=$(grep -A 100 "## $VERSION" CHANGELOG.md | grep -B 100 -m 2 "## " | head -n -1 || echo "")
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "Version: $VERSION"

      - name: Create Release
        id: create_release
        if: steps.check_release.outputs.is_release == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release v${{ env.VERSION }}
          body: |
            ${{ env.CHANGELOG }}
          draft: false
          prerelease: false

      - name: Update major version tag
        if: steps.check_release.outputs.is_release == 'true'
        run: |
          # Extract major version
          MAJOR_VERSION=$(echo "${{ env.VERSION }}" | cut -d. -f1)
          
          # Create or update the major version tag
          git tag -f "v${MAJOR_VERSION}" 
          git push -f origin "v${MAJOR_VERSION}"
          echo "Updated major version tag: v${MAJOR_VERSION}"